name: Full CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint-and-test-frontend:
    name: Lint & Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front-end

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies (frontend)
        run: npm install --legacy-peer-deps && npm run build

      - name: Run Tests (frontend)
        run: npm test -- --watchAll=false

  lint-and-test-backend:
    name: Lint & Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies (backend)
        run: npm install

      - name: Run Tests (backend)
        run: npm test || echo "No tests defined"

  build-and-deploy-frontend:
    name: Build & Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    needs: [lint-and-test-frontend]

    defaults:
      run:
        working-directory: front-end

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install --legacy-peer-deps && npm run build

      - name: Build Next.js frontend
        run: npm run build

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        run: netlify deploy --dir=out --prod --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site=${{ secrets.NETLIFY_SITE_ID }}

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend]

    steps:
      - name: Deploy backend via Render API
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.CRON_API_SECRET }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId":"'"${{ secrets.RENDER_SERVICE_ID }}"'"}' \
            https://api.render.com/deploy/srv-cs924pogph6c73bval0g  # Replace with your render deploy URL

  # notify:
  #   name: Notify Slack on Success
  #   runs-on: ubuntu-latest
  #   needs: [build-and-deploy-frontend, deploy-backend]

  #   steps:
  #     - name: Send Slack Notification
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"âœ… Movie Booking app frontend and backend deployed successfully!"}' \
  #         ${{ secrets.SLACK_WEBHOOK_URL }}
